DBConnection: Database Connections
==================================

The `DBConnection` module currently has four external classes,
`MySQLConnection`, `PostgresConnection`, `SQLiteConnection`, 
`SybaseConnection`, and `MaxdbConnection`.

You can pass the keyword argument `debug` to any connector.  If set to
true, then any SQL sent to the database will also be printed to the
console.

MySQL
-----

`MySQLConnection` takes the keyword arguments `host`, `db`, `user`,
and `passwd`, just like `MySQLdb.connect` does.

MySQLConnection supports all the features, though MySQL only supports
transactions_ when using the InnoDB backend, and SQLObject currently
does not have support for explicitly defining the backend when using
``createTable``.

Postgres
--------

`PostgresConnection` takes a single connection string, like
``"dbname=something user=some_user"``, just like `psycopg.connect`.
You can also use the same keyword arguments as for `MySQLConnection`,
and a dsn string will be constructed.

PostgresConnection supports transactions and all other features.

SQLite
------

`SQLiteConnection` takes the a single string, which is the path to the
database file.  

SQLite puts all data into one file, with a journal file that is opened
in the same directory during operation (the file is deleted when the
program quits).  SQLite does not restrict the types you can put in a
column -- strings can go in integer columns, dates in integers, etc.

SQLiteConnection doesn't support `automatic class generation`_ and
SQLite does not support `runtime column changes`_.

SQLite may have concurrency issues, depending on your usage in a
multi-threaded environment.

Firebird
--------

`FirebirdConnection` takes the arguments `host`, `db`, `user` (default
``"sysdba"``), `passwd` (default ``"masterkey"``).

Firebird supports all the features.  Support is still young, so there
may be some issues, especially with concurrent access, and especially
using lazy selects.  Try ``list(MyClass.select())`` to avoid
concurrent cursors if you have problems (using ``list()`` will
pre-fetch all the results of a select).

Firebird support uses the kinterbasdb_ Python library.

.. _kinterbasdb: http://kinterbasdb.sourceforge.net/

If you are using indexes and get an error like *key size exceeds
implementation restriction for index*, see `this page`_ to understand
the restrictions on your indexing.

.. _this page: http://www.volny.cz/iprenosil/interbase/ip_ib_indexcalculator.htm

SybaseConnection
----------------

`SybaseConnection` takes the arguments `host`, `db`, `user`, and
`passwd`.  It also takes the extra boolean argument `locking` (default
True), which is passed through when performing a connection.  You may
use a False value for `locking` if you are not using multiple threads,
for a slight performance boost.

It uses the Sybase_ module.

.. _Sybase: http://www.object-craft.com.au/projects/sybase/

MAX DB
------

MAX DB, also known as SAP DB, is available from a partnership of SAP
and MySQL.  It takes the typical arguments: `host`, `database`,
`user`, `password`.  It also takes the arguments `sqlmode` (default
``"internal"``), `isolation`, and `timeout`, which are passed through
when creating the connection to the database.

It uses the sapdb_ module.

.. _sapdb: http://www.sapdb.org/sapdbPython.html
